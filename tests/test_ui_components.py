import pytest
import dash
from dash import html
from dash import dcc
import dash_daq as daq

# Modules to test
from mydash import retornaMedidor, retornaBarraEntregas
import medidor # Used by retornaMedidor
from main_app import app as main_dash_app # The Dash app instance from main_app

# --- Mock Dash App for Testing Components ---
@pytest.fixture
def mock_app():
    """Create a mock Dash app for testing components that need app context (e.g., for get_asset_url)."""
    app = dash.Dash(__name__)
    # Mock get_asset_url if your components use it extensively and you need to check its calls
    # For now, just having the app instance is often enough.
    # app.get_asset_url = lambda x: f'/assets/{x}' # Simple mock
    return app

# --- Tests for mydash.py components ---

def test_retorna_medidor_structure_and_id():
    """Test retornaMedidor for basic structure and ID assignment."""
    test_id = "gauge-test-1"
    component = retornaMedidor(porcentagem=50, id=test_id)

    assert isinstance(component, html.Div), "retornaMedidor should return an html.Div"
    assert component.id == test_id, f"retornaMedidor should have id '{test_id}'"
    
    # Check for dcc.Graph (it's nested)
    assert isinstance(component.children, html.Div), "Main wrapper's child should be an html.Div (aspect_ratio_container)"
    aspect_ratio_container = component.children
    assert isinstance(aspect_ratio_container.children, html.Div), "aspect_ratio_container's child should be an html.Div (inner_graph_container)"
    inner_graph_container = aspect_ratio_container.children
    
    graph_component = None
    if hasattr(inner_graph_container, 'children') and isinstance(inner_graph_container.children, dcc.Graph):
        graph_component = inner_graph_container.children
    
    assert graph_component is not None, "retornaMedidor should contain a dcc.Graph component"
    assert graph_component.id == f"{test_id}-graph", f"Graph should have id '{test_id}-graph'"


def test_retorna_medidor_figure_generation():
    """Test that dcc.Graph in retornaMedidor gets a figure from medidor.fazHtmlMedidor."""
    porcentagem = 60
    component = retornaMedidor(porcentagem=porcentagem, id="gauge-fig-test")
    
    # Navigate to the graph component
    graph_component = component.children.children.children # dcc.Graph is here

    # In Dash 2.x, component properties are often in a 'props' dict within to_plotly_json()
    # and direct attribute access might not yield the figure dict itself for comparison.
    plotly_json = graph_component.to_plotly_json()
    assert 'props' in plotly_json, "Graph's plotly_json should have 'props'"
    assert 'figure' in plotly_json['props'], "Graph's props should contain a 'figure'"
    
    # The figure object itself is complex. We check if it's generated by the correct function.
    # This relies on fazHtmlMedidor returning a dict.
    expected_figure = medidor.fazHtmlMedidor(porcentagem)
    # Compare the actual figure from the component with the expected one
    assert plotly_json['props']['figure'] == expected_figure, "Graph figure should match output of medidor.fazHtmlMedidor"


def test_retorna_barra_entregas_structure_and_id(mock_app):
    """Test retornaBarraEntregas for basic structure and ID assignment."""
    test_id = "bar-test-1"
    entregas = 7
    component = retornaBarraEntregas(entregasAtual=entregas, app=mock_app, id=test_id)

    assert isinstance(component, html.Div), "retornaBarraEntregas should return an html.Div"
    assert component.id == test_id, f"retornaBarraEntregas should have id '{test_id}'"

    # Check for H3, Img, and Div wrapping GraduatedBar
    assert len(component.children) == 3, "Main Div should have three children (H3, Img, Div for bar)"
    
    h3_child, img_child, bar_wrapper_child = component.children

    assert isinstance(h3_child, html.H3), "First child should be an html.H3"
    assert f"{entregas} entregas" in str(h3_child.children), "H3 should contain the delivery count text"

    assert isinstance(img_child, html.Img), "Second child should be an html.Img"
    assert img_child.src == mock_app.get_asset_url('truck-icon.png'), "Img src should use app.get_asset_url"

    assert isinstance(bar_wrapper_child, html.Div), "Third child should be an html.Div (bar wrapper)"
    assert isinstance(bar_wrapper_child.children, daq.GraduatedBar), "Bar wrapper should contain a daq.GraduatedBar"
    assert bar_wrapper_child.children.id == f"{test_id}-bar", f"GraduatedBar should have id '{test_id}-bar'"


def test_retorna_barra_entregas_bar_properties(mock_app):
    """Test daq.GraduatedBar properties in retornaBarraEntregas."""
    entregas_val = 12
    entregas_max_fixed = 15 # from mydash.py logic
    component = retornaBarraEntregas(entregasAtual=entregas_val, app=mock_app, id="bar-props-test")
    
    graduated_bar = component.children[2].children # H3, Img, Div -> GraduatedBar

    assert graduated_bar.value == entregas_val, "GraduatedBar value should match entregasAtual"
    assert graduated_bar.max == entregas_max_fixed, "GraduatedBar max should be 15 when entregasAtual is below 15"

    entregas_over = 20
    component_over = retornaBarraEntregas(entregasAtual=entregas_over, app=mock_app, id="bar-props-over-test")
    graduated_bar_over = component_over.children[2].children
    assert graduated_bar_over.max == entregas_over, "GraduatedBar max should be entregasAtual when it's over 15"


# --- Tests for main_app.py ---

def test_main_app_layout_defined():
    """Test that the main_app.py has a layout attribute."""
    assert hasattr(main_dash_app, 'layout'), "main_app should have a 'layout' attribute"
    assert isinstance(main_dash_app.layout, html.Div), "main_app.layout should be an html.Div"

def test_main_app_external_stylesheets():
    """Test that main_app includes the correct external stylesheet."""
    # In Dash 2.x, external_stylesheets is typically accessed via app.config
    assert main_dash_app.config.get('external_stylesheets') == ['assets/custom_styles.css']

def test_main_app_title():
    """Test that the main app layout includes the H1 title."""
    app_layout_children = main_dash_app.layout.children
    assert isinstance(app_layout_children[0], html.H1), "First child of layout should be an H1"
    assert app_layout_children[0].children == "Operational Dashboard", "H1 title is incorrect"
    assert app_layout_children[0].className == 'app-title', "H1 should have className 'app-title'"


def test_main_app_contains_custom_components():
    """Test that the main app layout integrates retornaMedidor and retornaBarraEntregas."""
    layout_str = str(main_dash_app.layout.to_plotly_json()) # Convert to string for easier searching of IDs/classNames

    # Check for first gauge
    assert "gauge-1" in layout_str, "Layout should contain gauge-1"
    # Check for first delivery bar
    assert "delivery-bar-1" in layout_str, "Layout should contain delivery-bar-1"
    
    # More specific checks can be done by traversing the layout tree if needed
    # Example: Find component by ID
    
    # Gauge section
    gauge_section = main_dash_app.layout.children[1] # H1 is 0, first component-wrapper is 1
    assert gauge_section.className == 'component-wrapper'
    assert isinstance(gauge_section.children[1].children, html.Div) # retornaMedidor returns a Div
    assert gauge_section.children[1].children.id == 'gauge-1' # Check ID of the gauge itself

    # Delivery bar section
    bar_section = main_dash_app.layout.children[2] # Second component-wrapper is 2
    assert bar_section.className == 'component-wrapper'
    assert isinstance(bar_section.children[1], html.Div) # retornaBarraEntregas returns a Div
    assert bar_section.children[1].id == 'delivery-bar-1' # Check ID of the bar component


def test_main_app_component_classes():
    """Test that components in main_app have correct CSS classes assigned."""
    assert main_dash_app.layout.className == 'main-app-container'
    
    # Section 1 (Gauge)
    section1 = main_dash_app.layout.children[1]
    assert section1.className == 'component-wrapper'
    assert section1.children[0].className == 'section-title' # H3
    assert section1.children[1].className == 'gauge-display-wrapper' # Div wrapping gauge

    # Section 2 (Bar)
    section2 = main_dash_app.layout.children[2]
    assert section2.className == 'component-wrapper'
    assert section2.children[0].className == 'section-title' # H3

    # Section 3 (Side-by-side)
    section3 = main_dash_app.layout.children[3]
    assert section3.className == 'component-wrapper component-row'
    assert section3.children[0].children[0].className == 'subsection-title' # H4 for gauge 2
    assert section3.children[1].children[0].className == 'subsection-title' # H4 for bar 2
